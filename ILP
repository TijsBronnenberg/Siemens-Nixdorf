from itertools import product
from sys import stdout as out
from mip import Model, xsum, minimize, BINARY

filename = r"C:\python exam\d159.dat"

def VisualizePath(path):
    import networkx as nx
    import matplotlib.pyplot as plt

    G = nx.Graph()

    for i in range(len(path)):
        G.add_node(i,pos=(path[i][0],path[i][1]))



    fig, ax = plt.subplots(figsize=(10, 5))
    plt.title('Nearest Neighbor: diskette d159')

    for i in range(1,len(path)):
        G.add_edge(i-1,i)

    pos=nx.get_node_attributes(G,'pos')


    nx.draw_networkx(G, pos,with_labels=False, node_size=5, node_color='b', ax=ax)
    


    ax.set_axis_on()
    ax.tick_params(left=True, bottom=True, labelleft=True, labelbottom=True)

    plt.show()


#filename = r"C:\python exam\testfig1.txt"

#Functie om van een gegeven path de benodigde tijd te berekening die de motoren nodig hebben.
def CalcTime(path):
        Time = 0
        for i in range(1,len(path)):
            if 1.1*abs(path[i][0]-path[i-1][0]) > abs((path[i][1]-path[i-1][1])):
                Time += 1.1*abs(path[i][0]-path[i-1][0])
            else: 
                    Time +=abs(path[i][1]-path[i-1][1])
            
        return float("{:.2f}".format(Time))


fh = open(filename,"r")
L = fh.readline()
L = fh.readline()
Toolbox = [0,0]
Path =[]
Path.append(Toolbox) 

cordinates = []
while L != "EOF\n":
    L = L.split()
    cordinate = [float(L[1]),float(L[2])] 
    cordinates.append(cordinate)
    L = fh.readline()
    
options = [Toolbox] 

for i in cordinates:
    options.append(i)


time_matrix = []
for i in range(len(options)):
    row = []
    for j in range(len(options)):
        row.append(CalcTime([options[i],options[j]]))
    time_matrix.append(row)


# number of nodes and list of vertices
n, V = len(time_matrix), set(range(len(time_matrix)))
F = list(range(len(time_matrix)))

model = Model()

# binary variables indicating if arc (i,j) is used on the route or not
x = [[model.add_var(var_type=BINARY) for j in V] for i in V]

# continuous variable to prevent subtours: each city will have a
# different sequential id in the planned route except the first one
y = [model.add_var() for i in V]

# objective function: minimize the distance
model.objective = minimize(xsum(time_matrix[i][j]*x[i][j] for i in V for j in V))

# constraint : leave each city only once
for i in V:
    model += xsum(x[i][j] for j in V - {i}) == 1

# constraint : enter each city only once
for i in V:
    model += xsum(x[j][i] for j in V - {i}) == 1

# subtour elimination
for (i, j) in product(V - {0}, V - {0}):
    if i != j:
        model += y[i] - (n+1)*x[i][j] >= y[j]-n


model.optimize(max_seconds=15*60)


solution=[]
# checking if a solution was found
if model.num_solutions:
    out.write('route with total distance %g found: %s'
              % (model.objective_value, F[0]))
    nc = 0
    m=0
    
    solution.append(0)
    while True and m < len(time_matrix):
        nc = [i for i in V if x[nc][i].x >= 0.99][0]
        out.write(' -> %s' % F[nc])
        solution.append(F[nc])
        m += 1
        if nc == 0:
            break
    out.write('\n')

print(solution)
VisualizePath(solution)
